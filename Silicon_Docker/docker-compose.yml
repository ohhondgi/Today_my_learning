version: "3.7"

services:
  client:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    tty: true
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - frontend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # flask app이 실행되는 port number 5000 바인딩
      # command: gunicorn --bind 0.0.0.0:5000 --workers 3 app:app
    restart: always
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      # - appdata:/var/www/
    links:
      - db
    networks:
      - frontend
      - backend
    # environment:
    #   MONGODB_HOST: mongodb:27017
    #   MONGODB_USERNAME: "apiuser"
    #   MONGODB_PASSWORD: "apipassword"
    #   MONGODB_USERNAME: "admin"
    #   MONGODB_PASSWORD: "password"
    # depends_on:
    # - mongodb
    # - redis
    # - db
  worker:
    build:
      context: ./celery-queue
      dockerfile: Dockerfile
    depends_on:
      - redis
    volumes: ["./celery-queue:/queue"]
    networks:
      - backend
    #   - frontend
  monitor:
    build:
      context: ./celery-queue
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    entrypoint: flower
    command: -A tasks --port=5555 --broker=redis://redis:6379/0
    depends_on:
      - redis
    volumes: ["./celery-queue:/queue"]
    networks:
      - backend
  redis:
    image: redis
    networks:
      - backend
  db:
    # platform: linux/x86_64
    # image: mysql/mysql-server:8.0
    container_name: mysql
    build:
      context: ./db
      dockerfile: Dockerfile
    # command: --lower_case_table_names=1 # 대소문자 구분
    # environment:
    #   MYSQL_ROOT_PASSWORD: root
    #   MYSQL_DATABASE: testdb
    #   MYSQL_USER: root
    #   MYSQL_PASSWORD: password
    #   MYSQL_ROOT_HOST: localhost
    # restart: always
    ports:
      - "32000:3306"
    volumes:
      - ./db:/docker-entrypoint-initdb.d/:ro
      - ./db/data:/var/lib/mysql
    networks:
      - backend

  # mongodb:
  #   image: mongo
  #   container_name: mongo
  #   restart: unless-stopped
  #   command: mongod --auth
  #   environment:
  #     MONGO_HOST: "localhost"
  #     MONGO_PORT: "27017"
  #     MONGO_INITDB_ROOT_USERNAME: "admin"
  #     MONGO_INITDB_ROOT_PASSWORD: "password"
  #     MONGO_INITDB_DATABASE: webapp
  #     MONGODB_DATA_DIR: /data/db
  #   volumes:
  #     - mongodbdata:/data/db
  #   ports:
  #     - "27017:27017"
  #   networks:
  #     - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
# volumes:
#   mongodbdata:
#     driver: local
#   appdata:
#     driver: local
